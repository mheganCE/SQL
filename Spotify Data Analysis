/* For this SQL, I have downloaded Spotifydata from Kaggle.


--- Here's how I created the table, following all the column names from the downloaded csv file from Kaggle
CREATE TABLE BIT_DB.Spotifydata 
(id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL)

--- I uploaded the Spotifydata (in CSV) to the SQLiteStudio and starts querying the table.

--- To explore what information available in the table, I select * all first.
SELECT * FROM BIT_DB.Spotifydata

--- Then answering few questions by SQL

---What were the Top 10 track_names based on popularity?
SELECT track_name, artist_name, popularity 
FROM BIT_DB.Spotifydata
ORDER BY popularity desc LIMIT 10

--- How many artists were included in Spotifydata?
SELECT COUNT(distinct artist_name)
FROM BIT_DB.Spotifydata

--- Artists' names that were having more than one track in the list and its total tracks.
SELECT artist_name, COUNT(track_name) as "No._of_tracks"
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING "No._of_tracks" > 1
ORDER BY "No._of_tracks" desc

--- Then, I determined the average danceability and energy by artist and track names.
SELECT artist_name, track_name, AVG(danceability), AVG(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name

